
import telebot
import sqlite3
import redis
import crud
from tokens import API_TOKEN


redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)
redis_client.flushdb()

bot = telebot.TeleBot(API_TOKEN)

database_name = "salon_database.db"
database_path = f"databases/{database_name}"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_state = {}


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def registration(message, type):
    if type == 'name':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        name = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Customer (customer_id, name, tg_id) VALUES (?, ?, ?)", (tg_id, name, tg_id))
        conn.commit()
        conn.close()

        text = "–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"

    elif type == 'email':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        email = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("UPDATE Customer SET email = ? WHERE tg_id = ?", (email, tg_id))
        conn.commit()
        conn.close()

        text = "–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"

    elif type == 'phone':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        phone_number = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("UPDATE Customer SET phone_number = ? WHERE tg_id = ?", (phone_number, tg_id))
        conn.commit()
        conn.close()

        text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990-01-01):"
    elif type == 'birthday':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        birthdate = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("UPDATE Customer SET birthdate = ? WHERE tg_id = ?", (birthdate, tg_id))
        conn.commit()
        conn.close()
        conn.close()

        text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! \n–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ /services –∏ –∞–∫—Ü–∏–π /promotions"

    return text


# –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
def appointment(message, type, service_id=None):
    buttons = []

    if type == 'appointment_service':
        chat_id = message.chat.id
        tg_id = message.from_user.id

        service = message.text
        print(service)

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM Service WHERE service_name = '{service}'")
        service_id = cursor.fetchone()[0]
        conn.close()

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Appointment (customer_id, service_id) VALUES (?, ?)", (tg_id, service_id))
        conn.commit()
        conn.close()

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Employee")
        data = cursor.fetchall()
        conn.close()

        buttons = []
        for d in data:
            buttons.append(d[1])

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ: "

    elif type == 'appointment_employee':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        empoloyee = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM Employee WHERE name = '{empoloyee}'")
        empoloyee_id = cursor.fetchone()[0]
        conn.close()

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute(
            f"""
            UPDATE Appointment
            SET employee_id = ?
            WHERE
                1 = 1
                and customer_id = {int(tg_id)}
                and appointment_id = (
                    SELECT MAX(appointment_id)
                    FROM Appointment
                    WHERE customer_id = {int(tg_id)}
                )
            """,
            (empoloyee_id,))
        print(empoloyee_id, tg_id)
        conn.commit()
        conn.close()

        text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990-01-01):"

    elif type == 'appointment_date':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        appointment_date = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute(
            f"""
            UPDATE Appointment
            SET appointment_date = ?
            WHERE
                1 = 1
                and customer_id = {int(tg_id)}
                and appointment_id = (
                    SELECT MAX(appointment_id)
                    FROM Appointment
                    WHERE customer_id = {int(tg_id)}
                )
            """,
            (appointment_date,))
        conn.commit()
        conn.close()

        text = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´-–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22-30):"

    elif type == 'appointment_time':
        chat_id = message.chat.id
        tg_id = message.from_user.id
        appointment_time = message.text

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute(
            f"""
            UPDATE Appointment
            SET appointment_time = ?
            WHERE
                1 = 1
                and customer_id = {int(tg_id)}
                and appointment_id = (
                    SELECT MAX(appointment_id)
                    FROM Appointment
                    WHERE customer_id = {int(tg_id)}
                )
            """,
            (appointment_time,))
        conn.commit()
        conn.close()

        text = "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É!"

    return text, buttons


# ----------------------------------------------------------------------

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥
@bot.message_handler(commands=['services'])
def handle_services(message):
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —É—Å–ª—É–≥–∞—Ö
    services = redis_client.get('services')
    if not services:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç
        services = crud.read_service()
        text = '–ù–∞—à–∏ —É—Å–ª—É–≥–∏'
        for serv in services:
            text += f'\n\n‚úÖ {serv[-3]} \n–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {serv[-2]} \n–°—Ç–æ–∏–º–æ—Å—Ç—å: {serv[-1]} —Ä—É–±–ª–µ–π'
        services = text
        print(services)
        redis_client.set('services', services)
    bot.reply_to(message, services)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–∏–¥–æ–∫
@bot.message_handler(commands=['promotions'])
def handle_promotion(message):
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —É—Å–ª—É–≥–∞—Ö
    promotions = redis_client.get('promotions')
    if not promotions:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç
        promotions = crud.read_promotion()
        text = '–ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏'
        for prom in promotions:
            text += f'\n\nüëë {prom[1]} \n–û–ø–∏—Å–∞–Ω–∏–µ: {prom[-1]} \n–î–∞—Ç—ã: {prom[2].replace('-', '.')} - {prom[3].replace('-', '.')}'
        promotions = text
        print(promotions)
        redis_client.set('promotions', promotions)
    bot.reply_to(message, promotions)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
@bot.message_handler(commands=['my_appointments'])
def handle_my_appointments(message):
    tg_id = message.from_user.id
    chat_id = message.chat.id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    appointments = crud.read_appointment_by_customer_id(tg_id)
    print(appointments)
    if appointments:
        text = '–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:'
        for app in appointments:
            employee = crud.read_employee(app[2])
            print(employee)
            employee_name = '-'
            employee_phone = '-'
            if employee:
                employee_name = employee[1]
                employee_phone = employee[3]

            service = crud.read_service(app[3])
            service_name = service[2]
            service_price = service[-1]

            date = app[4]
            time = app[5]
            text += f'\n\nüíé{service_name}üíé \n\n–ú–∞—Å—Ç–µ—Ä: {employee_name} (–º–æ–±. {employee_phone})'
            text += f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {service_price} —Ä—É–±. \n\n–î–∞—Ç–∞: {date.replace('-', '.')} \n–í—Ä–µ–º—è: {time}'

        text += '\n\n‚ùóÔ∏è–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –í–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–æ–º –ø–æ –Ω–æ–º–µ—Ä—É –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    else:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ù–∞–∂–º–∏—Ç–µ /appointment, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É'
    print(text)
    bot.send_message(chat_id, text)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
@bot.message_handler(commands=['about_me'])
def handle_about_me(message):
    tg_id = message.from_user.id
    chat_id = message.chat.id
    customer = crud.read_customer_by_tg(tg_id)
    if customer:
        text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—Å'
        text += f'\n\n–ò–º—è: {customer[1]} \n–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: {customer[2]} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {customer[3]} \n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {customer[4]} '
    else:
        text = '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
    bot.send_message(chat_id, text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    tg_id = message.from_user.id
    chat_id = message.chat.id
    customer = crud.read_customer_by_tg(tg_id)
    print(customer)
    if not customer:
        users_state[chat_id] = 'name'
        bot.send_message(message.chat.id, 
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è:",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=telebot.types.ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_me
@bot.message_handler(commands=['delete_me'])
def delete_me(message):
    tg_id = message.from_user.id
    chat_id = message.chat.id
    customer = crud.read_customer_by_tg(tg_id)

    if customer:
        crud.delete_customer(customer[0])
    bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ –í–∞—Å —É–¥–∞–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
@bot.message_handler(commands=['appointment'])
def handle_appointment(message):
    tg_id = message.from_user.id
    chat_id = message.chat.id
    customer = crud.read_customer_by_tg(tg_id)
    print(customer)
    if customer:
        print('STATE SERVICE')

        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * from Service")
        data = cursor.fetchall()
        conn.close()
        print(data)

        buttons = []
        for d in data:
            buttons.append(d[2])

        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)

        users_state[chat_id] = 'appointment_service'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ù–∞–∂–º–∏—Ç–µ /start")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    state = users_state.get(chat_id)

    # if state in ['name', 'email', 'phone', 'birthday']:
    if state == 'name':
        text = registration(message, state)
        users_state[chat_id] = 'email'
        bot.send_message(chat_id, text)
    elif state == 'email':
        text = registration(message, state)
        users_state[chat_id] = 'phone'
        bot.send_message(chat_id, text)
    elif state == 'phone':
        text = registration(message, state)
        users_state[chat_id] = 'birthday'
        bot.send_message(chat_id, text)
    elif state == 'birthday':
        text = registration(message, state)
        users_state[chat_id] = 'CLEAR'
        bot.send_message(chat_id, text)
    elif state == 'appointment_service':
        print('APPOINTMENT SERVICE STATE')
        text, buttons = appointment(message, state)

        if buttons:
            keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)

        users_state[chat_id] = 'appointment_employee'
        bot.send_message(chat_id, text, reply_markup=keyboard)
    elif state == 'appointment_employee':
        print('APPOINTMENT EMPLOYEE STATE')
        text, buttons = appointment(message, state)

        users_state[chat_id] = 'appointment_date'
        bot.send_message(chat_id, text, reply_markup=telebot.types.ReplyKeyboardRemove())
    elif state == 'appointment_date':
        print('APPOINTMENT DATE STATE')
        text, buttons = appointment(message, state)

        users_state[chat_id] = 'appointment_time'
        bot.send_message(chat_id, text, reply_markup=telebot.types.ReplyKeyboardRemove())
    elif state == 'appointment_time':
        print('APPOINTMENT TIME STATE')
        text, buttons = appointment(message, state)

        users_state[chat_id] = 'CLEAR'
        bot.send_message(chat_id, text, reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id, '–û—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
